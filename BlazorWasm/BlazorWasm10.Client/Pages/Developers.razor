@page "/developers"
@inject IIteratorFormating IteratorFormating
@inject HttpClient Http

@rendermode InteractiveWebAssembly
<PageTitle>Developers</PageTitle>

<h1>Developers</h1>

<p>This component demonstrates fetching data from the Db - Developer.</p>
<MudButton Variant="Variant.Filled" OnClick="@Click">Default</MudButton>

@if (_developers == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<MudDataGrid T="Developer" Items="@_developers" EditMode="@( DataGridEditMode.Form)" ReadOnly="@false"
				 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
				 Bordered="true" Dense="true" EditTrigger="@(DataGridEditTrigger.Manual)">
		<Columns>
			<PropertyColumn Property="@(p=>p.Id)" Sortable="true" />
			<PropertyColumn Property="@(p=>p.Name)" Sortable="true" />
			<PropertyColumn Property="@(p=>p.BirthYear)" Sortable="true" />
			<TemplateColumn CellClass="d-flex justify-end">
				<CellTemplate>
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
				</CellTemplate>
			</TemplateColumn>
			@* <PropertyColumn Property="@(p=>IteratorFormating.ExportIteratorToString( p.VideoGames))" Sortable="true" /> *@
		</Columns>
	</MudDataGrid>

	<MudExpansionPanels Style="flex:1">
		<MudExpansionPanel Text="Show Events">
			@foreach (var message in _events)
			{
				<MudText Typo="@Typo.body2">@message</MudText>
			}
			@if (_events.Count > 0)
			{
				<div class="d-flex">
					<MudSpacer />
					<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
				</div>
			}
		</MudExpansionPanel>
	</MudExpansionPanels>
}

@using BlazorWasm40.Application.Utils
@code {
	@using BlazorWasm60.Domain.Entities;


	private IEnumerable<Developer>? _developers = null;


	private List<string> _events = new();

	private async Task Click()
	{
		int a = 5;
	}

	protected override async Task OnInitializedAsync()
	{
		_developers = await Http.GetFromJsonAsync<IEnumerable<Developer>>("api/Developer");
	}

	void StartedEditingItem(Developer item)
	{
		_events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

	void CanceledEditingItem(Developer item)
	{
		_events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

	async Task CommittedItemChanges(Developer item)
	{
		HttpResponseMessage response = await Http.PutAsJsonAsync("api/Developer/" + item.Id, item);


		_events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}
}
