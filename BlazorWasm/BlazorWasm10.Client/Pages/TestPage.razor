@page "/TestPage"

@using System.Net.Http.Json
@inject HttpClient httpClient

<MudDataGrid T="Element" Items="@Elements.Take(4)" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
			 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
			 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
	<Columns>
		<PropertyColumn Property="x => x.Number" Title="Nr" IsEditable="false" />
		<PropertyColumn Property="x => x.Sign" />
		<PropertyColumn Property="x => x.Name" />
		<PropertyColumn Property="x => x.Position">
			<EditTemplate>
				<MudSelect @bind-Value="context.Item.Position" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
					<MudSelectItem Value="0">zero</MudSelectItem>
					<MudSelectItem Value="1">one</MudSelectItem>
					<MudSelectItem Value="17">seventeen</MudSelectItem>
				</MudSelect>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.Molar" Title="Molar mass" />
		<TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
			<CellTemplate>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
			</CellTemplate>
		</TemplateColumn>
	</Columns>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
	<MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
	<div class="d-flex justify-start align-center">
		<p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
		<MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
	</div>
	<div class="d-flex justify-start align-center">
		<p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
		<MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
	</div>
</div>

<MudExpansionPanels Style="flex:1">
	<MudExpansionPanel Text="Show Events">
		@foreach (var message in _events)
		{
			<MudText Typo="@Typo.body2">@message</MudText>
		}
		@if (_events.Count > 0)
		{
			<div class="d-flex">
				<MudSpacer />
				<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
			</div>
		}
	</MudExpansionPanel>
</MudExpansionPanels>

@code {
	﻿@using System.Collections.Generic;
	@using System.Text.Json.Serialization;
	public class Element
	{
		public string Group { get; set; }
		public int Position { get; set; }
		public string Name { get; set; }
		public int Number { get; set; }

		[JsonPropertyName("small")]
		public string Sign { get; set; }
		public double Molar { get; set; }
		public IList<int> Electrons { get; set; }

		/// <summary>
		/// Overriding Equals is essential for use with Select and Table because they use HashSets internally
		/// </summary>
		public override bool Equals(object obj) => object.Equals(GetHashCode(), obj?.GetHashCode());

		/// <summary>
		/// Overriding GetHashCode is essential for use with Select and Table because they use HashSets internally
		/// </summary>
		public override int GetHashCode() => Name?.GetHashCode() ?? 0;

		public override string ToString() => $"{Sign} - {Name}";
	}
	private IEnumerable<Element> Elements = new List<Element>();
	private bool _readOnly;
	private bool _isCellEditMode;
	private List<string> _events = new();
	private bool _editTriggerRowClick;

	protected override async Task OnInitializedAsync()
	{
		Elements = new List<Element>() 
		{
		new Element(){
			Group="a"
		}
		};
	}

	// events
	void StartedEditingItem(Element item)
	{
		_events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

	void CanceledEditingItem(Element item)
	{
		_events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

	void CommittedItemChanges(Element item)
	{
		_events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}
}